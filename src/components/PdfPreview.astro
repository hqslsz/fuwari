---
// src/components/PdfPreview.astro
// 定义组件可以接收的属性
export interface Props {
	pdfUrl: string;
}
const { pdfUrl } = Astro.props;
---

<!--
  组件的 HTML 结构。
  使用 class 代替 id 以便组件可以被多次复用。
  通过 data-url 属性将 PDF 的路径传递给客户端脚本。
-->
<div class="pdf-scroll-container" data-url={pdfUrl}>
  <div class="pdf-viewer"></div>
  <div class="pdf-controls">
    <a href={pdfUrl} download class="download-button" aria-label="下载 PDF">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="icon-download"
      >
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
        <polyline points="7 10 12 15 17 10"></polyline>
        <line x1="12" y1="15" x2="12" y2="3"></line>
      </svg>
      <span>下载 PDF</span>
    </a>
  </div>
</div>

<style is:global>
  .pdf-scroll-container {
    width: 100%;
    overflow-x: auto;
    margin: 2rem 0;
  }

  .pdf-viewer {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1.25rem;
    width: 100%;
    padding: 1rem;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.02), transparent);
    border-radius: 12px;
  }

  .pdf-viewer :global(canvas) {
    max-width: 100%;
    height: auto;
    box-shadow: 
      0 10px 25px -5px rgba(0, 0, 0, 0.1),
      0 8px 10px -6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    border: 1px solid rgba(0, 0, 0, 0.08);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .pdf-viewer :global(canvas:hover) {
    transform: translateY(-2px);
    box-shadow: 
      0 20px 40px -10px rgba(0, 0, 0, 0.15),
      0 10px 15px -8px rgba(0, 0, 0, 0.1);
  }

  .pdf-controls {
    margin-top: 2rem;
    text-align: center;
    padding: 1rem;
  }

  .download-button {
    display: inline-flex !important;
    align-items: center;
    justify-content: center;
    gap: 0.625rem;
    background: rgb(125, 116, 0) !important;
    color: #ffffff !important;
    padding: 0.875rem 2rem !important;
    border-radius: 12px !important;
    border: none !important;
    font-size: 1rem;
    font-weight: 600;
    text-decoration: none !important;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 8px rgba(125, 116, 0, 0.3) !important;
    position: relative;
  }

  .download-button::before {
    display: none;
  }

  .download-button:hover {
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 12px rgba(125, 116, 0, 0.4) !important;
    background: rgb(145, 136, 0) !important;
  }

  .download-button:hover::before {
    display: none;
  }

  /* 防止主题样式覆盖 - 使用更高优先级 */
  .pdf-controls a.download-button,
  .pdf-controls a.download-button:link,
  .pdf-controls a.download-button:visited,
  .pdf-scroll-container a.download-button {
    background: rgb(125, 116, 0) !important;
    color: #ffffff !important;
  }

  .pdf-controls a.download-button:hover,
  .pdf-controls a.download-button:focus,
  .pdf-scroll-container a.download-button:hover {
    background: rgb(145, 136, 0) !important;
    color: #ffffff !important;
  }

  .pdf-controls a.download-button:active,
  .pdf-scroll-container a.download-button:active {
    background: rgb(125, 116, 0) !important;
    color: #ffffff !important;
  }

  .download-button:active {
    transform: translateY(0) !important;
    box-shadow: 0 1px 4px rgba(125, 116, 0, 0.3) !important;
  }

  .download-button .icon-download {
    width: 1.25em;
    height: 1.25em;
  }

  /* 深色模式支持 */
  @media (prefers-color-scheme: dark) {
    .pdf-viewer {
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.03), transparent);
    }

    .pdf-viewer :global(canvas) {
      border-color: rgba(255, 255, 255, 0.1);
      box-shadow: 
        0 10px 25px -5px rgba(0, 0, 0, 0.3),
        0 8px 10px -6px rgba(0, 0, 0, 0.3);
    }

    .pdf-viewer :global(canvas:hover) {
      box-shadow: 
        0 20px 40px -10px rgba(0, 0, 0, 0.4),
        0 10px 15px -8px rgba(0, 0, 0, 0.3);
    }
  }

  /* 响应式设计 */
  @media (max-width: 640px) {
    .pdf-viewer {
      padding: 0.5rem;
      gap: 1rem;
    }

    .download-button {
      padding: 0.75rem 1.5rem;
      font-size: 0.9375rem;
      width: 100%;
      max-width: 280px;
    }

    .pdf-controls {
      margin-top: 1.5rem;
    }
  }
</style>

<script type="module">
  import * as pdfjsLib from "https://mozilla.github.io/pdf.js/build/pdf.mjs";

  pdfjsLib.GlobalWorkerOptions.workerSrc = `https://mozilla.github.io/pdf.js/build/pdf.worker.mjs`;

  /**
   * 渲染单个 PDF 组件实例。
   * @param {HTMLElement} container - 组件的顶层容器元素。
   */
  async function renderPdfInstance(container) {
    const viewer = container.querySelector(".pdf-viewer");
    if (!viewer) return;

    if (container.dataset.initialized === "true") return;
    container.dataset.initialized = "true";

    viewer.innerHTML = "";
    const url = container.dataset.url;

    try {
      // 获取容器的实际宽度以实现响应式渲染
      const containerWidth = viewer.clientWidth;
      if (containerWidth === 0) {
        console.warn("PDF viewer container has no width, PDF might not render correctly.");
        return;
      }
      const pdfDoc = await pdfjsLib.getDocument(url).promise;
      // 并发渲染所有页面
      const renderTasks = [];
      for (let pageNum = 1; pageNum <= pdfDoc.numPages; pageNum++) {
        renderTasks.push(
          (async () => {
            const page = await pdfDoc.getPage(pageNum);
            const viewportUnscaled = page.getViewport({ scale: 1 });
            const scale = containerWidth / viewportUnscaled.width;
            const viewport = page.getViewport({ scale: scale });

            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            canvas.height = viewport.height;
            canvas.width = viewport.width;
            viewer.appendChild(canvas);

            await page.render({ canvasContext: ctx, viewport: viewport }).promise;
          })(),
        );
      }
      await Promise.all(renderTasks);
    } catch (error) {
      console.error(`渲染 PDF (${url}) 时出错:`, error);
      viewer.innerHTML = `<p style="color: red;">加载 PDF 失败: ${error.message}</p>`;
    }
  }
  function initializeAllPdfViewers() {
    const containers = document.querySelectorAll(".pdf-scroll-container");
    containers.forEach(renderPdfInstance);
  }
  document.addEventListener("astro:page-load", initializeAllPdfViewers);
  initializeAllPdfViewers();
</script>